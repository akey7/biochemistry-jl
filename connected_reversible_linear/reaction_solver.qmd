---
title: "Connected Reversible Linear Reaction Solver"
format:
  html:
    toc: true
    html-math-method: mathjax
    code-fold: true
---

```{julia}
#| label: using-things
#| eval: true
#| include: false

using Printf
using JuMP
using GLPK
using Plots
plotlyjs()
```

## Create the model and display the results

```{julia}
#| label: create-model
#| eval: true
#| include: true

# Create a model using the GLPK solver (open-source solver)
model = Model(GLPK.Optimizer)

# Define decision variables
@variable(model, v1 >= 0)
@variable(model, v2 >= 0)
@variable(model, v3 >= 0)
@variable(model, v4 >= 0)
@variable(model, v5 >= 0)

# Set objective function to maximize
@objective(model, Max, v2)

# Add constraints, mass balance
@constraint(model, -v1 + v2 == 0)
@constraint(model, v1 - v2 -v3 == 0)
@constraint(model, v2 - v4 + v5 == 0)
@constraint(model, v4 - v5 == 0)

# Add constraints, fluxes
@constraint(model, v1 >= 1)
@constraint(model, v4 >= 2)

# Solve the model
optimize!(model)

# Get results
println("Optimal v1: ", value(v1))
println("Optimal v2: ", value(v2))
println("Optimal v3: ", value(v3))
println("Optimal v4: ", value(v4))
println("Optimal v5: ", value(v5))
println("Optimal objective value: ", objective_value(model))
```
