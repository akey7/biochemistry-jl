---
title: "Connected Reversible Linear Reaction Solver"
format:
  html:
    toc: true
    html-math-method: mathjax
    code-fold: true
---

```{julia}
#| label: using-things
#| eval: true
#| include: false

using Printf
using JuMP
using GLPK
using Plots
plotlyjs()
```

## What is being modeled?

This system is taken from [4.4. Connected Reversible Linear Reactions](https://masspy.readthedocs.io/en/latest/education/sb2/chapters/sb2_chapter4.html#Connected-Reversible-Linear-Reactions) in [1].

$$ x_1 \underset{v_2}{\stackrel{v_1}{\rightleftharpoons}} x_2 \stackrel{v_3} \rightarrow x_3 \underset{v_5}{\stackrel{v_4}{\rightleftharpoons}} x_4 $$

$$ S = \begin{pmatrix} {-1} & {1} & {0} & {0} & {0}  \\ {1} & {-1} & {-1} & {0} & {0}  \\ {0} & {0} & {1} & {-1} & {1}  \\  {0} & {0} & {0} & {1} & {-1}  \\ \end{pmatrix} $$

$$ v = \begin{pmatrix} v_1 \\ v_2 \\ v_3 \\ v_4 \\ v_5 \end{pmatrix} $$

## Optimize the model

```{julia}
#| label: create-model
#| eval: true
#| include: true

# Create a model using the GLPK solver (open-source solver)
model = Model(GLPK.Optimizer)

# Define decision variables
@variable(model, 0.5 <= v1 <= 1.5)
@variable(model, 0.25 <= v2 <= 0.75)
@variable(model, 0.5 <= v3 <= 1.5)
@variable(model, 0.5 <= v4 <= 1.5)
@variable(model, 0.25 <= v5 <= 0.75)

# Set objective function to maximize
@objective(model, Max, v3)

# Add constraints, mass balance
@constraint(model, -v1 + v2 == 0)
@constraint(model, v1 - v2 -v3 == 0)
@constraint(model, v3 - v4 + v5 == 0)
@constraint(model, v4 - v5 == 0)

# Solve the model
optimize!(model)

# Get results
println("Optimal v1: ", value(v1))
println("Optimal v2: ", value(v2))
println("Optimal v3: ", value(v3))
println("Optimal v4: ", value(v4))
println("Optimal v5: ", value(v5))
println("Optimal objective value: ", objective_value(model))
```

## Citation

1. Bernhard Ã˜. Palsson. Systems Biology: Simulation of Dynamic Network States. Cambridge University Press, 2011. doi:10.1017/CBO9780511736179.
