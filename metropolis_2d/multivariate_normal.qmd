---
title: "Multivariate Normal Distribution"
format:
  html:
    toc: true
    html-math-method: mathjax
    code-fold: false
---

```{julia}
#| label: using-things
#| eval: true
#| include: false

using Printf
using Plots
using CairoMakie
using Makie
using Random
using Distributions
using StatsBase

plotlyjs()
Random.seed!(1234)
```

## Multivariate Normal Distribution

### Define the distribution

```{julia}
#| label: obtain-2d-samples
#| eval: true
#| include: true

# Define the mean vector (μ) and covariance matrix (Σ)
μ = [0.0, 0.0]             # Mean of the distribution
Σ = [1.0 0.0; 0.0 1.0]     # Covariance matrix

# Create a multivariate normal distribution
mv_gaussian = MvNormal(μ, Σ);  # ; To suppress output from cell
```

### Plot 10,000 random samples as a histogram

```{julia}
#| label: plot-2d-histogram
#| eval: true
#| include: true

# Generate samples (e.g., 1000 samples)
samples = rand(mv_gaussian, 10000)

# Access the x and y components of the samples
x_samples = samples[1, :]
y_samples = samples[2, :]

histogram2d(x_samples, y_samples, nbins=(50, 50))
```

### Plot the PDF as a countour plot

```{julia}
#| label: plot-surface
#| eval: true
#| include: true

# Create a grid of points for the x and y axes
xs = range(start=-3, stop=3, length=100)
ys = range(start=-3, stop=3, length=100)

# Compute the PDF values over the grid
zs = [pdf(mv_gaussian, [x, y]) for x in xs, y in ys]

# Create a figure with a custom size (e.g., 800x600 pixels)
fig = Figure(resolution = (500, 500))

# Create the contour plot in the figure
ax = Axis(fig[1, 1])
CairoMakie.contour!(ax, xs, ys, zs, levels = 20, colormap = :viridis, linewidth = 2)

# Show the plot
fig
```
